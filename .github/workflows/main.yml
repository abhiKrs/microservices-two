name: ci

on:
  pull_request:  
    branches:
      - "staging"

jobs:
   testwebapp:
    runs-on: ubuntu-latest
    steps:
      - name: Build and push
        uses: actions/checkout@v2
      - 
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19
      - 
        name: test
        working-directory: gowebapp/web-api
        run: go test -v ./...
   testfilterservice:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 8
    - name: Build and Test
      working-directory: scala/
      run: echo "success"
      #sbt "project filterJob" test 
   testlivetail:
    runs-on: ubuntu-latest
    steps:
      -
        uses: actions/checkout@v2
      - 
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19
      -        
        name: Testing application livetail
        working-directory: gowebapp/livetail
        run: go test -v ./...
   testnotification:
    runs-on: ubuntu-latest
    steps:
      -
        uses: actions/checkout@v2
      - 
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19
      -  
        name: Testing application notification app
        working-directory: gowebapp/notification
        run: go test -v ./...
   buildwebapp:                 
    runs-on: ubuntu-latest
    needs: testwebapp
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build and push web-api
        uses: docker/build-push-action@v4
        with:
          context: ./gowebapp/web-api
          file: ./gowebapp/web-api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/goweb-api:${{ github.head_ref }}.${{ github.sha }}
   buildlivetail:                 
    runs-on: ubuntu-latest
    needs: testlivetail
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build and push livetail
        uses: docker/build-push-action@v4
        with:
          context: ./gowebapp/livetail
          file: ./gowebapp/livetail/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/livetail:${{ github.head_ref }}.${{ github.sha }}
   buildnotification:                 
    runs-on: ubuntu-latest
    needs: testnotification
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build and push notification
        uses: docker/build-push-action@v4
        with:
          context: ./gowebapp/notification
          file: ./gowebapp/notification/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/livetail:${{ github.head_ref }}.${{ github.sha }}
   buildflinkservice:                 
    runs-on: ubuntu-latest
    needs: testfilterservice
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build and push flink-cluster
        uses: docker/build-push-action@v4
        with:
          context: ./scala
          file: ./scala/flink.Dockerfile   
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/flink:${{ github.head_ref }}.${{ github.sha }}
   buildfilterservice:                 
    runs-on: ubuntu-latest
    needs: testfilterservice
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build and push flink-cluster
        uses: docker/build-push-action@v4
        with:
          context: ./scala
          file: ./scala/Dockerfile   
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/filter-service:${{ github.head_ref }}.${{ github.sha }} 
   DeployProduction:                 
    runs-on: ubuntu-latest
    needs: [buildnotification, buildlivetail, buildwebapp, buildfilterservice, buildflinkservice]
    steps:
      -
        name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary

      - name: Adding Known Hosts
        run: ssh-keyscan -p ${{ secrets.SSH_PORT}} -H ${{ secrets.SSH_HOST }}  >> ~/.ssh/known_hosts
    
      - name: Deploy the Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /opt/microservices/helm-chart
            ##export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
            helm upgrade webapp webapp-prodchart/ -n logfire-local
